{"ast":null,"code":"var _jsxFileName = \"/Users/samuelokpe/Documents/GitHub/menu-management-system/src/components/molecules/MenuList.tsx\";\nimport React from 'react';\nimport MenuItem from './MenuItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MenuList = ({\n  items,\n  onAdd,\n  expandedItems,\n  onToggleExpand\n}) => {\n  const buildMenuTree = items => {\n    const map = {};\n    const roots = [];\n\n    // Initialize the map with each item and an empty children array\n    items.forEach(item => {\n      map[item.id] = {\n        ...item,\n        children: []\n      }; // Initialize children array\n    });\n\n    // Build the tree structure\n    items.forEach(item => {\n      if (item.parent_id) {\n        // If item has a parent, push it into the parent's children array\n        map[item.parent_id].children.push(map[item.id]);\n      } else {\n        // If item is a root, push it into the roots array\n        roots.push(map[item.id]);\n      }\n    });\n    return roots; // Return the top-level items\n  };\n\n  // Build the tree structure from the flat items\n  const menuTree = buildMenuTree(items);\n  const renderItems = items => {\n    return items.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pl-4\",\n      children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n        item: item,\n        onAdd: () => onAdd(item),\n        onToggleExpand: () => onToggleExpand(item.id),\n        isExpanded: expandedItems[item.id] || false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), expandedItems[item.id] && item.children.length > 0 && renderItems(item.children)]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-2\",\n    children: renderItems(menuTree)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 10\n  }, this);\n};\n_c = MenuList;\nexport default MenuList;\nvar _c;\n$RefreshReg$(_c, \"MenuList\");","map":{"version":3,"names":["React","MenuItem","jsxDEV","_jsxDEV","MenuList","items","onAdd","expandedItems","onToggleExpand","buildMenuTree","map","roots","forEach","item","id","children","parent_id","push","menuTree","renderItems","className","isExpanded","fileName","_jsxFileName","lineNumber","columnNumber","length","_c","$RefreshReg$"],"sources":["/Users/samuelokpe/Documents/GitHub/menu-management-system/src/components/molecules/MenuList.tsx"],"sourcesContent":["import React from 'react';\nimport MenuItem from './MenuItem';\nimport { MenuItem as MenuItemType } from '../../hooks/apiHooks';\n\ninterface MenuListProps {\n  items: MenuItemType[];\n  onAdd: (item: MenuItemType) => void;\n  expandedItems: { [key: string]: boolean };\n  onToggleExpand: (id: string) => void;\n}\n\nconst MenuList: React.FC<MenuListProps> = ({ items, onAdd, expandedItems, onToggleExpand }) => {\n\n    const buildMenuTree = (items) => {\n        const map = {};\n        const roots = [];\n    \n        // Initialize the map with each item and an empty children array\n        items.forEach(item => {\n            map[item.id] = { ...item, children: [] }; // Initialize children array\n        });\n    \n        // Build the tree structure\n        items.forEach(item => {\n            if (item.parent_id) {\n                // If item has a parent, push it into the parent's children array\n                map[item.parent_id].children.push(map[item.id]);\n            } else {\n                // If item is a root, push it into the roots array\n                roots.push(map[item.id]);\n            }\n        });\n    \n        return roots; // Return the top-level items\n    };\n  \n  // Build the tree structure from the flat items\n  const menuTree = buildMenuTree(items);\n\n  const renderItems = (items: MenuItemType[]) => {\n    return items.map((item) => (\n      <div key={item.id} className=\"pl-4\">\n        <MenuItem\n          item={item}\n          onAdd={() => onAdd(item)}\n          onToggleExpand={() => onToggleExpand(item.id)}\n          isExpanded={expandedItems[item.id] || false}\n        />\n        {expandedItems[item.id] && item.children.length > 0 && renderItems(item.children)}\n      </div>\n    ));\n  };\n\n  return <div className=\"space-y-2\">{renderItems(menuTree)}</div>;\n};\n\nexport default MenuList;\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUlC,MAAMC,QAAiC,GAAGA,CAAC;EAAEC,KAAK;EAAEC,KAAK;EAAEC,aAAa;EAAEC;AAAe,CAAC,KAAK;EAE3F,MAAMC,aAAa,GAAIJ,KAAK,IAAK;IAC7B,MAAMK,GAAG,GAAG,CAAC,CAAC;IACd,MAAMC,KAAK,GAAG,EAAE;;IAEhB;IACAN,KAAK,CAACO,OAAO,CAACC,IAAI,IAAI;MAClBH,GAAG,CAACG,IAAI,CAACC,EAAE,CAAC,GAAG;QAAE,GAAGD,IAAI;QAAEE,QAAQ,EAAE;MAAG,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC;;IAEF;IACAV,KAAK,CAACO,OAAO,CAACC,IAAI,IAAI;MAClB,IAAIA,IAAI,CAACG,SAAS,EAAE;QAChB;QACAN,GAAG,CAACG,IAAI,CAACG,SAAS,CAAC,CAACD,QAAQ,CAACE,IAAI,CAACP,GAAG,CAACG,IAAI,CAACC,EAAE,CAAC,CAAC;MACnD,CAAC,MAAM;QACH;QACAH,KAAK,CAACM,IAAI,CAACP,GAAG,CAACG,IAAI,CAACC,EAAE,CAAC,CAAC;MAC5B;IACJ,CAAC,CAAC;IAEF,OAAOH,KAAK,CAAC,CAAC;EAClB,CAAC;;EAEH;EACA,MAAMO,QAAQ,GAAGT,aAAa,CAACJ,KAAK,CAAC;EAErC,MAAMc,WAAW,GAAId,KAAqB,IAAK;IAC7C,OAAOA,KAAK,CAACK,GAAG,CAAEG,IAAI,iBACpBV,OAAA;MAAmBiB,SAAS,EAAC,MAAM;MAAAL,QAAA,gBACjCZ,OAAA,CAACF,QAAQ;QACPY,IAAI,EAAEA,IAAK;QACXP,KAAK,EAAEA,CAAA,KAAMA,KAAK,CAACO,IAAI,CAAE;QACzBL,cAAc,EAAEA,CAAA,KAAMA,cAAc,CAACK,IAAI,CAACC,EAAE,CAAE;QAC9CO,UAAU,EAAEd,aAAa,CAACM,IAAI,CAACC,EAAE,CAAC,IAAI;MAAM;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC,EACDlB,aAAa,CAACM,IAAI,CAACC,EAAE,CAAC,IAAID,IAAI,CAACE,QAAQ,CAACW,MAAM,GAAG,CAAC,IAAIP,WAAW,CAACN,IAAI,CAACE,QAAQ,CAAC;IAAA,GAPzEF,IAAI,CAACC,EAAE;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQZ,CACN,CAAC;EACJ,CAAC;EAED,oBAAOtB,OAAA;IAAKiB,SAAS,EAAC,WAAW;IAAAL,QAAA,EAAEI,WAAW,CAACD,QAAQ;EAAC;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACjE,CAAC;AAACE,EAAA,GA3CIvB,QAAiC;AA6CvC,eAAeA,QAAQ;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}